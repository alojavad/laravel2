<!-- -->
@extends('master')

@section('content')
<article>
    <h1>Cache</h1>
    <ul>
        <li><a href="http://laravel.com/docs/5.0/cache#configuration">Configuration</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#cache-usage">Cache Usage</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#increments-and-decrements">Increments &amp; Decrements</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#cache-tags">Cache Tags</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#cache-events">Cache Events</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#database-cache">Database Cache</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#memcached-cache">Memcached Cache</a></li>
        <li><a href="http://laravel.com/docs/5.0/cache#redis-cache">Redis Cache</a></li>
    </ul>
    <p><a name="configuration"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/cache#configuration">Configuration</a></h2>
    <p>Laravel provides a unified API for various caching systems. The cache configuration is located at <code class=" language-php">config<span class="token operator">/</span>cache<span class="token punctuation">.</span>php</code>. In this file you may specify which cache driver you would like used by default throughout your application. Laravel supports popular caching backends like <a href="http://memcached.org/">Memcached</a> and <a href="http://redis.io/">Redis</a> out of the box.</p>
    <p>The cache configuration file also contains various other options, which are documented within the file, so make sure to read over these options. By default, Laravel is configured to use the <code class=" language-php">file</code> cache driver, which stores the serialized, cached objects in the filesystem. For larger applications, it is recommended that you use an in-memory cache such as Memcached or APC. You may even configure multiple cache configurations for the same driver.</p>
    <p>Before using a Redis cache with Laravel, you will need to install the <code class=" language-php">predis<span class="token operator">/</span>predis</code> package (~1.0) via Composer.</p>
    <p><a name="cache-usage"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/cache#cache-usage">Cache Usage</a></h2>
    <h4>Storing An Item In The Cache</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">put<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Using Carbon Objects To Set Expire Time</h4>
<pre class=" language-php"><code class=" language-php"><span class="token variable">$expiresAt</span> <span class="token operator">=</span> <span class="token scope">Carbon<span class="token punctuation">::</span></span><span class="token function">now<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">addMinutes<span class="token punctuation">(</span></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">put<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token variable">$expiresAt</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Storing An Item In The Cache If It Doesn't Exist</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">add<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>The <code class=" language-php">add</code> method will return <code class=" language-php"><span class="token boolean">true</span></code> if the item is actually <strong>added</strong> to the cache. Otherwise, the method will return <code class=" language-php"><span class="token boolean">false</span></code>.</p>
    <h4>Checking For Existence In Cache</h4>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">has<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> //
</span><span class="token punctuation">}</span></code></pre>
    <h4>Retrieving An Item From The Cache</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Retrieving An Item Or Returning A Default Value</h4>
<pre class=" language-php"><code class=" language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">'default'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Storing An Item In The Cache Permanently</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">forever<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>Sometimes you may wish to retrieve an item from the cache, but also store a default value if the requested item doesn't exist. You may do this using the <code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span>remember</code> method:</p>
<pre class=" language-php"><code class=" language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">remember<span class="token punctuation">(</span></span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token scope">DB<span class="token punctuation">::</span></span><span class="token function">table<span class="token punctuation">(</span></span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>You may also combine the <code class=" language-php">remember</code> and <code class=" language-php">forever</code> methods:</p>
<pre class=" language-php"><code class=" language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">rememberForever<span class="token punctuation">(</span></span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token scope">DB<span class="token punctuation">::</span></span><span class="token function">table<span class="token punctuation">(</span></span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>Note that all items stored in the cache are serialized, so you are free to store any type of data.</p>
    <h4>Pulling An Item From The Cache</h4>
    <p>If you need to retrieve an item from the cache and then delete it, you may use the <code class=" language-php">pull</code> method:</p>
    <pre class=" language-php"><code class=" language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">pull<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Removing An Item From The Cache</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">forget<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Access Specific Cache Stores</h4>
    <p>When using multiple cache stores, you may access them via the <code class=" language-php">store</code> method:</p>
    <pre class=" language-php"><code class=" language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">store<span class="token punctuation">(</span></span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="increments-and-decrements"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/cache#increments-and-decrements">Increments &amp; Decrements</a></h2>
    <p>All drivers except <code class=" language-php">file</code> and <code class=" language-php">database</code> support the <code class=" language-php">increment</code> and <code class=" language-php">decrement</code> operations:</p>
    <h4>Incrementing A Value</h4>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">increment<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">increment<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token variable">$amount</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Decrementing A Value</h4>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">decrement<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">decrement<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token variable">$amount</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="cache-tags"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/cache#cache-tags">Cache Tags</a></h2>
    <blockquote>
        <p><strong>Note:</strong> Cache tags are not supported when using the <code class=" language-php">file</code> or <code class=" language-php">database</code> cache drivers. Furthermore, when using multiple tags with caches that are stored "forever", performance will be best with a driver such as <code class=" language-php">memcached</code>, which automatically purges stale records.</p>
    </blockquote>
    <h4>Accessing A Tagged Cache</h4>
    <p>Cache tags allow you to tag related items in the cache, and then flush all caches tagged with a given name. To access a tagged cache, use the <code class=" language-php">tags</code> method.</p>
    <p>You may store a tagged cache by passing in an ordered list of tag names as arguments, or as an ordered array of tag names:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">tags<span class="token punctuation">(</span></span><span class="token string">'people'</span><span class="token punctuation">,</span> <span class="token string">'authors'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">put<span class="token punctuation">(</span></span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token variable">$john</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">tags<span class="token punctuation">(</span></span><span class="token punctuation">[</span><span class="token string">'people'</span><span class="token punctuation">,</span> <span class="token string">'artists'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">put<span class="token punctuation">(</span></span><span class="token string">'Anne'</span><span class="token punctuation">,</span> <span class="token variable">$anne</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>You may use any cache storage method in combination with tags, including <code class=" language-php">remember</code>, <code class=" language-php">forever</code>, and <code class=" language-php">rememberForever</code>. You may also access cached items from the tagged cache, as well as use the other cache methods such as <code class=" language-php">increment</code> and <code class=" language-php">decrement</code>.</p>
    <h4>Accessing Items In A Tagged Cache</h4>
    <p>To access a tagged cache, pass the same ordered list of tags used to save it.</p>
<pre class=" language-php"><code class=" language-php"><span class="token variable">$anne</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">tags<span class="token punctuation">(</span></span><span class="token string">'people'</span><span class="token punctuation">,</span> <span class="token string">'artists'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'Anne'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$john</span> <span class="token operator">=</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">tags<span class="token punctuation">(</span></span><span class="token punctuation">[</span><span class="token string">'people'</span><span class="token punctuation">,</span> <span class="token string">'authors'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'John'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>You may flush all items tagged with a name or list of names. For example, this statement would remove all caches tagged with either <code class=" language-php">people</code>, <code class=" language-php">authors</code>, or both. So, both "Anne" and "John" would be removed from the cache:</p>
    <pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">tags<span class="token punctuation">(</span></span><span class="token string">'people'</span><span class="token punctuation">,</span> <span class="token string">'authors'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">flush<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>In contrast, this statement would remove only caches tagged with <code class=" language-php">authors</code>, so "John" would be removed, but not "Anne".</p>
    <pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">tags<span class="token punctuation">(</span></span><span class="token string">'authors'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">flush<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="cache-events"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/cache#cache-events">Cache Events</a></h2>
    <p>To execute code on every cache operation, you may listen for the events fired by the cache:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Event<span class="token punctuation">::</span></span><span class="token function">listen<span class="token punctuation">(</span></span><span class="token string">'cache.hit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> //
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Event<span class="token punctuation">::</span></span><span class="token function">listen<span class="token punctuation">(</span></span><span class="token string">'cache.missed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> //
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Event<span class="token punctuation">::</span></span><span class="token function">listen<span class="token punctuation">(</span></span><span class="token string">'cache.write'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> //
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token scope">Event<span class="token punctuation">::</span></span><span class="token function">listen<span class="token punctuation">(</span></span><span class="token string">'cache.delete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> //
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="database-cache"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/cache#database-cache">Database Cache</a></h2>
    <p>When using the <code class=" language-php">database</code> cache driver, you will need to setup a table to contain the cache items. You'll find an example <code class=" language-php">Schema</code> declaration for the table below:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Schema<span class="token punctuation">::</span></span><span class="token function">create<span class="token punctuation">(</span></span><span class="token string">'cache'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">string<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">unique<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">text<span class="token punctuation">(</span></span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">integer<span class="token punctuation">(</span></span><span class="token string">'expiration'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="memcached-cache"></a></p>
    <h4>Memcached Cache</h4>
    <p>Using the Memcached cache requires the <a href="http://pecl.php.net/package/memcached">Memcached PECL package</a> to be installed.</p>
    <p>The default <a href="http://laravel.com/docs/5.0/cache#configuration">configuration</a> uses TCP/IP based on <a href="http://php.net/manual/en/memcached.addserver.php">Memcached::addServer</a>:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'memcached'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">11211</span><span class="token punctuation">,</span> <span class="token string">'weight'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>
    <p>You may also set the <code class=" language-php">host</code> option to a UNIX socket path. If you do this, the <code class=" language-php">port</code> option should be set to <code class=" language-php"><span class="token number">0</span></code>:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'memcached'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'/var/run/memcached/memcached.sock'</span><span class="token punctuation">,</span> <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'weight'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>
    <p><a name="redis-cache"></a></p>
    <h4>Redis Cache</h4>
    <p>See <a href="http://laravel.com/docs/redis#configuration">Redis Configuration</a></p>
</article>
@stop