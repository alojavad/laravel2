<!-- -->
@extends('master')

@section('content')
<article>
<h1>Upgrade Guide</h1>
<ul>
    <li><a href="http://laravel.com/docs/5.0/upgrade#upgrade-5.0.16">Upgrading To 5.0.16</a></li>
    <li><a href="http://laravel.com/docs/5.0/upgrade#upgrade-5.0">Upgrading To 5.0 From 4.2</a></li>
    <li><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.2">Upgrading To 4.2 From 4.1</a></li>
    <li><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.1.29">Upgrading To 4.1.29 From &lt;= 4.1.x</a></li>
    <li><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.1.26">Upgrading To 4.1.26 From &lt;= 4.1.25</a></li>
    <li><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.1">Upgrading To 4.1 From 4.0</a></li>
</ul>
<p><a name="upgrade-5.0.16"></a></p>
<h2><a href="http://laravel.com/docs/5.0/upgrade#upgrade-5.0.16">Upgrading To 5.0.16</a></h2>
<p>In your <code class=" language-php">bootstrap<span class="token operator">/</span>autoload<span class="token punctuation">.</span>php</code> file, update the <code class=" language-php"><span class="token variable">$compiledPath</span></code> variable to:</p>
<pre class=" language-php"><code class=" language-php"><span class="token variable">$compiledPath</span> <span class="token operator">=</span> <span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/../vendor/compiled.php'</span><span class="token punctuation">;</span></code></pre>
<p><a name="upgrade-5.0"></a></p>
<h2><a href="http://laravel.com/docs/5.0/upgrade#upgrade-5.0">Upgrading To 5.0 From 4.2</a></h2>
<h3>Fresh Install, Then Migrate</h3>
<p>The recommended method of upgrading is to create a new Laravel <code class=" language-php"><span class="token number">5.0</span></code> install and then to copy your <code class=" language-php"><span class="token number">4.2</span></code> site's unique application files into the new application. This would include controllers, routes, Eloquent models, Artisan commands, assets, and other code specific to your application.</p>
<p>To start, <a href="http://laravel.com/docs/5.0/installation">install a new Laravel 5 application</a> into a fresh directory in your local environment. We'll discuss each piece of the migration process in further detail below.</p>
<h3>Composer Dependencies &amp; Packages</h3>
<p>Don't forget to copy any additional Composer dependencies into your 5.0 application. This includes third-party code such as SDKs.</p>
<p>Some Laravel-specific packages may not be compatible with Laravel 5 on initial release. Check with your package's maintainer to determine the proper version of the package for Laravel 5. Once you have added any additional Composer dependencies your application needs, run <code class=" language-php">composer update</code>.</p>
<h3>Namespacing</h3>
<p>By default, Laravel 4 applications did not utilize namespacing within your application code. So, for example, all Eloquent models and controllers simply lived in the "global" namespace. For a quicker migration, you can simply leave these classes in the global namespace in Laravel 5 as well.</p>
<h3>Configuration</h3>
<h4>Migrating Environment Variables</h4>
<p>Copy the new <code class=" language-php"><span class="token punctuation">.</span>env<span class="token punctuation">.</span>example</code> file to <code class=" language-php"><span class="token punctuation">.</span>env</code>, which is the <code class=" language-php"><span class="token number">5.0</span></code> equivalent of the old <code class=" language-php"><span class="token punctuation">.</span>env<span class="token punctuation">.</span>php</code> file. Set any appropriate values there, like your <code class=" language-php"><span class="token constant">APP_ENV</span></code> and <code class=" language-php"><span class="token constant">APP_KEY</span></code> (your encryption key), your database credentials, and your cache and session drivers.</p>
<p>Additionally, copy any custom values you had in your old <code class=" language-php"><span class="token punctuation">.</span>env<span class="token punctuation">.</span>php</code> file and place them in both <code class=" language-php"><span class="token punctuation">.</span>env</code> (the real value for your local environment) and <code class=" language-php"><span class="token punctuation">.</span>env<span class="token punctuation">.</span>example</code> (a sample instructional value for other team members).</p>
<p>For more information on environment configuration, view the <a href="http://laravel.com/docs/5.0/configuration#environment-configuration">full documentation</a>.</p>
<blockquote>
    <p><strong>Note:</strong> You will need to place the appropriate <code class=" language-php"><span class="token punctuation">.</span>env</code> file and values on your production server before deploying your Laravel 5 application.</p>
</blockquote>
<h4>Configuration Files</h4>
<p>Laravel 5.0 no longer uses <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span><span class="token punctuation">{</span>environmentName<span class="token punctuation">}</span><span class="token operator">/</span></code> directories to provide specific configuration files for a given environment. Instead, move any configuration values that vary by environment into <code class=" language-php"><span class="token punctuation">.</span>env</code>, and then access them in your configuration files using <code class=" language-php"><span class="token function">env<span class="token punctuation">(</span></span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'default value'</span><span class="token punctuation">)</span></code>. You will see examples of this in the <code class=" language-php">config<span class="token operator">/</span>database<span class="token punctuation">.</span>php</code> configuration file.</p>
<p>Set the config files in the <code class=" language-php">config<span class="token operator">/</span></code> directory to represent either the values that are consistent across all of your environments, or set them to use <code class=" language-php"><span class="token function">env<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> to load values that vary by environment.</p>
<p>Remember, if you add more keys to <code class=" language-php"><span class="token punctuation">.</span>env</code> file, add sample values to the <code class=" language-php"><span class="token punctuation">.</span>env<span class="token punctuation">.</span>example</code> file as well. This will help your other team members create their own <code class=" language-php"><span class="token punctuation">.</span>env</code> files.</p>
<h3>Routes</h3>
<p>Copy and paste your old <code class=" language-php">routes<span class="token punctuation">.</span>php</code> file into your new <code class=" language-php">app<span class="token operator">/</span>Http<span class="token operator">/</span>routes<span class="token punctuation">.</span>php</code>.</p>
<h3>Controllers</h3>
<p>Next, move all of your controllers into the <code class=" language-php">app<span class="token operator">/</span>Http<span class="token operator">/</span>Controllers</code> directory. Since we are not going to migrate to full namespacing in this guide, add the <code class=" language-php">app<span class="token operator">/</span>Http<span class="token operator">/</span>Controllers</code> directory to the <code class=" language-php">classmap</code> directive of your <code class=" language-php">composer<span class="token punctuation">.</span>json</code> file. Next, you can remove the namespace from the abstract <code class=" language-php">app<span class="token operator">/</span>Http<span class="token operator">/</span>Controllers<span class="token operator">/</span>Controller<span class="token punctuation">.</span>php</code> base class. Verify that your migrated controllers are extending this base class.</p>
<p>In your <code class=" language-php">app<span class="token operator">/</span>Providers<span class="token operator">/</span>RouteServiceProvider<span class="token punctuation">.</span>php</code> file, set the <code class=" language-php"><span class="token keyword">namespace</span></code> property to <code class=" language-php"><span class="token keyword">null</span></code>.</p>
<h3>Route Filters</h3>
<p>Copy your filter bindings from <code class=" language-php">app<span class="token operator">/</span>filters<span class="token punctuation">.</span>php</code> and place them into the <code class=" language-php"><span class="token function">boot<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> method of <code class=" language-php">app<span class="token operator">/</span>Providers<span class="token operator">/</span>RouteServiceProvider<span class="token punctuation">.</span>php</code>. Add <code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Route</span><span class="token punctuation">;</span></code> in the <code class=" language-php">app<span class="token operator">/</span>Providers<span class="token operator">/</span>RouteServiceProvider<span class="token punctuation">.</span>php</code> in order to continue using the <code class=" language-php">Route</code> Facade.</p>
<p>You do not need to move over any of the default Laravel 4.0 filters such as <code class=" language-php">auth</code> and <code class=" language-php">csrf</code>; they're all here, but as middleware. Edit any routes or controllers that reference the old default filters (e.g. <code class=" language-php"><span class="token punctuation">[</span><span class="token string">'before'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'auth'</span><span class="token punctuation">]</span></code>) and change them to reference the new middleware (e.g. <code class=" language-php"><span class="token punctuation">[</span><span class="token string">'middleware'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'auth'</span><span class="token punctuation">]</span><span class="token punctuation">.</span></code>)</p>
<p>Filters are not removed in Laravel 5. You can still bind and use your own custom filters using <code class=" language-php">before</code> and <code class=" language-php">after</code>.</p>
<h3>Global CSRF</h3>
<p>By default, <a href="http://laravel.com/docs/5.0/routing#csrf-protection">CSRF protection</a> is enabled on all routes. If you'd like to disable this, or only manually enable it on certain routes, remove this line from <code class=" language-php">App\<span class="token package">Http<span class="token punctuation">\</span>Kernel</span></code>'s <code class=" language-php">middleware</code> array:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'App\Http\Middleware\VerifyCsrfToken'</span><span class="token punctuation">,</span></code></pre>
<p>If you want to use it elsewhere, add this line to <code class=" language-php"><span class="token variable">$routeMiddleware</span></code>:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'csrf'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'App\Http\Middleware\VerifyCsrfToken'</span><span class="token punctuation">,</span></code></pre>
<p>Now you can add the middleware to individual routes / controllers using <code class=" language-php"><span class="token punctuation">[</span><span class="token string">'middleware'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'csrf'</span><span class="token punctuation">]</span></code> on the route. For more information on middleware, consult the <a href="http://laravel.com/docs/5.0/middleware">full documentation</a>.</p>
<h3>Eloquent Models</h3>
<p>Feel free to create a new <code class=" language-php">app<span class="token operator">/</span>Models</code> directory to house your Eloquent models. Again, add this directory to the <code class=" language-php">classmap</code> directive of your <code class=" language-php">composer<span class="token punctuation">.</span>json</code> file.</p>
<p>Update any models using <code class=" language-php">SoftDeletingTrait</code> to use <code class=" language-php">Illuminate\<span class="token package">Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>SoftDeletes</span></code>.</p>
<h4>Eloquent Caching</h4>
<p>Eloquent no longer provides the <code class=" language-php">remember</code> method for caching queries. You now are responsible for caching your queries manually using the <code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span>remember</code> function. For more information on caching, consult the <a href="http://laravel.com/docs/5.0/cache">full documentation</a>.</p>
<h3>User Authentication Model</h3>
<p>To upgrade your <code class=" language-php">User</code> model for Laravel 5's authentication system, follow these instructions:</p>
<p><strong>Delete the following from your <code class=" language-php"><span class="token keyword">use</span></code> block:</strong></p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>UserInterface</span><span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Reminders<span class="token punctuation">\</span>RemindableInterface</span><span class="token punctuation">;</span></code></pre>
<p><strong>Add the following to your <code class=" language-php"><span class="token keyword">use</span></code> block:</strong></p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Authenticatable</span><span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Passwords<span class="token punctuation">\</span>CanResetPassword</span><span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Authenticatable</span> <span class="token keyword">as</span> AuthenticatableContract<span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>CanResetPassword</span> <span class="token keyword">as</span> CanResetPasswordContract<span class="token punctuation">;</span></code></pre>
<p><strong>Remove the UserInterface and RemindableInterface interfaces.</strong></p>
<p><strong>Mark the class as implementing the following interfaces:</strong></p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">implements</span> <span class="token class-name">AuthenticatableContract</span><span class="token punctuation">,</span> CanResetPasswordContract</code></pre>
<p><strong>Include the following traits within the class declaration:</strong></p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">use</span> <span class="token package">Authenticatable</span><span class="token punctuation">,</span> CanResetPassword<span class="token punctuation">;</span></code></pre>
<p><strong>If you used them, remove <code class=" language-php">Illuminate\<span class="token package">Auth<span class="token punctuation">\</span>Reminders<span class="token punctuation">\</span>RemindableTrait</span></code>  and <code class=" language-php">Illuminate\<span class="token package">Auth<span class="token punctuation">\</span>UserTrait</span></code> from your use block and your class declaration.</strong></p>
<h3>Cashier User Changes</h3>
<p>The name of the trait and interface used by <a href="http://laravel.com/docs/5.0/billing">Laravel Cashier</a> has changed. Instead of using <code class=" language-php">BillableTrait</code>, use the <code class=" language-php">Laravel\<span class="token package">Cashier<span class="token punctuation">\</span>Billable</span></code> trait. And, instead of <code class=" language-php">Laravel\<span class="token package">Cashier<span class="token punctuation">\</span>BillableInterface</span></code> implement the <code class=" language-php">Laravel\<span class="token package">Cashier<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Billable</span></code> interface instead. No other method changes are required.</p>
<h3>Artisan Commands</h3>
<p>Move all of your command classes from your old <code class=" language-php">app<span class="token operator">/</span>commands</code> directory to the new <code class=" language-php">app<span class="token operator">/</span>Console<span class="token operator">/</span>Commands</code> directory. Next, add the <code class=" language-php">app<span class="token operator">/</span>Console<span class="token operator">/</span>Commands</code> directory to the <code class=" language-php">classmap</code> directive of your <code class=" language-php">composer<span class="token punctuation">.</span>json</code> file.</p>
<p>Then, copy your list of Artisan commands from <code class=" language-php">start<span class="token operator">/</span>artisan<span class="token punctuation">.</span>php</code> into the <code class=" language-php">command</code> array of the <code class=" language-php">app<span class="token operator">/</span>Console<span class="token operator">/</span>Kernel<span class="token punctuation">.</span>php</code> file.</p>
<h3>Database Migrations &amp; Seeds</h3>
<p>Delete the two migrations included with Laravel 5.0, since you should already have the users table in your database.</p>
<p>Move all of your migration classes from the old <code class=" language-php">app<span class="token operator">/</span>database<span class="token operator">/</span>migrations</code> directory to the new <code class=" language-php">database<span class="token operator">/</span>migrations</code>. All of your seeds should be moved from <code class=" language-php">app<span class="token operator">/</span>database<span class="token operator">/</span>seeds</code> to <code class=" language-php">database<span class="token operator">/</span>seeds</code>.</p>
<h3>Global IoC Bindings</h3>
<p>If you have any <a href="http://laravel.com/docs/5.0/container">IoC</a> bindings in <code class=" language-php">start<span class="token operator">/</span><span class="token keyword">global</span><span class="token punctuation">.</span>php</code>, move them all to the <code class=" language-php">register</code> method of the <code class=" language-php">app<span class="token operator">/</span>Providers<span class="token operator">/</span>AppServiceProvider<span class="token punctuation">.</span>php</code> file. You may need to import the <code class=" language-php">App</code> facade.</p>
<p>Optionally, you may break these bindings up into separate service providers by category.</p>
<h3>Views</h3>
<p>Move your views from <code class=" language-php">app<span class="token operator">/</span>views</code> to the new <code class=" language-php">resources<span class="token operator">/</span>views</code> directory.</p>
<h3>Blade Tag Changes</h3>
<p>For better security by default, Laravel 5.0 escapes all output from both the <code class=" language-php"><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code> and <code class=" language-php"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code> Blade directives. A new <code class=" language-php"><span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">}</span></code> directive has been introduced to display raw, unescaped output. The most secure option when upgrading your application is to only use the new <code class=" language-php"><span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">}</span></code> directive when you are <strong>certain</strong> that it is safe to display raw output.</p>
<p>However, if you <strong>must</strong> use the old Blade syntax, add the following lines at the bottom of <code class=" language-php">AppServiceProvider@register</code>:</p>
<pre class=" language-php"><code class=" language-php">\<span class="token scope">Blade<span class="token punctuation">::</span></span><span class="token function">setRawTags<span class="token punctuation">(</span></span><span class="token string">'{{'</span><span class="token punctuation">,</span> <span class="token string">'}}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        \<span class="token scope">Blade<span class="token punctuation">::</span></span><span class="token function">setContentTags<span class="token punctuation">(</span></span><span class="token string">'{{{'</span><span class="token punctuation">,</span> <span class="token string">'}}}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        \<span class="token scope">Blade<span class="token punctuation">::</span></span><span class="token function">setEscapedContentTags<span class="token punctuation">(</span></span><span class="token string">'{{{'</span><span class="token punctuation">,</span> <span class="token string">'}}}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This should not be done lightly, and may make your application more vulnerable to XSS exploits. Also, comments with <code class=" language-php"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">--</span></code> will no longer work.</p>
<h3>Translation Files</h3>
<p>Move your language files from <code class=" language-php">app<span class="token operator">/</span>lang</code> to the new <code class=" language-php">resources<span class="token operator">/</span>lang</code> directory.</p>
<h3>Public Directory</h3>
<p>Copy your application's public assets from your <code class=" language-php"><span class="token number">4.2</span></code> application's <code class=" language-php"><span class="token keyword">public</span></code> directory to your new application's <code class=" language-php"><span class="token keyword">public</span></code> directory. Be sure to keep the <code class=" language-php"><span class="token number">5.0</span></code> version of <code class=" language-php">index<span class="token punctuation">.</span>php</code>.</p>
<h3>Tests</h3>
<p>Move your tests from <code class=" language-php">app<span class="token operator">/</span>tests</code> to the new <code class=" language-php">tests</code> directory.</p>
<h3>Misc. Files</h3>
<p>Copy in any other files in your project. For example, <code class=" language-php"><span class="token punctuation">.</span>scrutinizer<span class="token punctuation">.</span>yml</code>, <code class=" language-php">bower<span class="token punctuation">.</span>json</code> and other similar tooling configuration files.</p>
<p>You may move your Sass, Less, or CoffeeScript to any location you wish. The <code class=" language-php">resources<span class="token operator">/</span>assets</code> directory could be a good default location.</p>
<h3>Form &amp; HTML Helpers</h3>
<p>If you're using Form or HTML helpers, you will see an error stating <code class=" language-php"><span class="token keyword">class</span> <span class="token string">'Form'</span> not found</code> or <code class=" language-php"><span class="token keyword">class</span> <span class="token string">'Html'</span> not found</code>. The Form and HTML helpers have been deprecated in Laravel 5.0; however, there are community-driven replacements such as those maintained by the <a href="http://laravelcollective.com/docs/5.0/html">Laravel Collective</a>.</p>
<p>For example, you may add <code class=" language-php"><span class="token string">"laravelcollective/html"</span><span class="token punctuation">:</span> <span class="token string">"~5.0"</span></code> to your <code class=" language-php">composer<span class="token punctuation">.</span>json</code> file's <code class=" language-php"><span class="token keyword">require</span></code> section.</p>
<p>You'll also need to add the Form and HTML facades and service provider. Edit <code class=" language-php">config<span class="token operator">/</span>app<span class="token punctuation">.</span>php</code> and add this line to the 'providers' array:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'Collective\Html\HtmlServiceProvider'</span><span class="token punctuation">,</span></code></pre>
<p>Next, add these lines to the 'aliases' array:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'Form'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'Collective\Html\FormFacade'</span><span class="token punctuation">,</span>
        <span class="token string">'Html'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'Collective\Html\HtmlFacade'</span><span class="token punctuation">,</span></code></pre>
<h3>CacheManager</h3>
<p>If your application code was injecting <code class=" language-php">Illuminate\<span class="token package">Cache<span class="token punctuation">\</span>CacheManager</span></code> to get a non-Facade version of Laravel's cache, inject <code class=" language-php">Illuminate\<span class="token package">Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Repository</span></code> instead.</p>
<h3>Pagination</h3>
<p>Replace any calls to <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">links<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> with <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">render<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>.</p>
<p>Replace any calls to <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getFrom<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> and <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getTo<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> with <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">firstItem<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> and <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">lastItem<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> respectively.</p>
<p>Remove the "get" prefix from calls to <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getPerPage<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>, <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getCurrentPage<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>, <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getLastPage<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> and <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getTotal<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> (e.g. <code class=" language-php"><span class="token variable">$paginator</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">perPage<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>).</p>
<h3>Beanstalk Queuing</h3>
<p>Laravel 5.0 now requires <code class=" language-php"><span class="token string">"pda/pheanstalk"</span><span class="token punctuation">:</span> <span class="token string">"~3.0"</span></code> instead of <code class=" language-php"><span class="token string">"pda/pheanstalk"</span><span class="token punctuation">:</span> <span class="token string">"~2.1"</span></code>.</p>
<h3>Remote</h3>
<p>The Remote component has been deprecated.</p>
<h3>Workbench</h3>
<p>The Workbench component has been deprecated.</p>
<p><a name="upgrade-4.2"></a></p>
<h2><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.2">Upgrading To 4.2 From 4.1</a></h2>
<h3>PHP 5.4+</h3>
<p>Laravel 4.2 requires PHP 5.4.0 or greater.</p>
<h3>Encryption Defaults</h3>
<p>Add a new <code class=" language-php">cipher</code> option in your <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span>app<span class="token punctuation">.</span>php</code> configuration file. The value of this option should be <code class=" language-php"><span class="token constant">MCRYPT_RIJNDAEL_256</span></code>.</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'cipher'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token constant">MCRYPT_RIJNDAEL_256</span></code></pre>
<p>This setting may be used to control the default cipher used by the Laravel encryption facilities.</p>
<blockquote>
    <p><strong>Note:</strong> In Laravel 4.2, the default cipher is <code class=" language-php"><span class="token constant">MCRYPT_RIJNDAEL_128</span></code> (AES), which is considered to be the most secure cipher. Changing the cipher back to <code class=" language-php"><span class="token constant">MCRYPT_RIJNDAEL_256</span></code> is required to decrypt cookies/values that were encrypted in Laravel &lt;= 4.1</p>
</blockquote>
<h3>Soft Deleting Models Now Use Traits</h3>
<p>If you are using soft deleting models, the <code class=" language-php">softDeletes</code> property has been removed. You must now use the <code class=" language-php">SoftDeletingTrait</code> like so:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>SoftDeletingTrait</span><span class="token punctuation">;</span>

        <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Eloquent</span> <span class="token punctuation">{</span>
        <span class="token keyword">use</span> <span class="token package">SoftDeletingTrait</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<p>You must also manually add the <code class=" language-php">deleted_at</code> column to your <code class=" language-php">dates</code> property:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Eloquent</span> <span class="token punctuation">{</span>
        <span class="token keyword">use</span> <span class="token package">SoftDeletingTrait</span><span class="token punctuation">;</span>

        <span class="token keyword">protected</span> <span class="token variable">$dates</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'deleted_at'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<p>The API for all soft delete operations remains the same.</p>
<blockquote>
    <p><strong>Note:</strong> The <code class=" language-php">SoftDeletingTrait</code> can not be applied on a base model. It must be used on an actual model class.</p>
</blockquote>
<h3>View / Pagination Environment Renamed</h3>
<p>If you are directly referencing the <code class=" language-php">Illuminate\<span class="token package">View<span class="token punctuation">\</span>Environment</span></code> class or <code class=" language-php">Illuminate\<span class="token package">Pagination<span class="token punctuation">\</span>Environment</span></code> class, update your code to reference <code class=" language-php">Illuminate\<span class="token package">View<span class="token punctuation">\</span>Factory</span></code> and <code class=" language-php">Illuminate\<span class="token package">Pagination<span class="token punctuation">\</span>Factory</span></code> instead. These two classes have been renamed to better reflect their function.</p>
<h3>Additional Parameter On Pagination Presenter</h3>
<p>If you are extending the <code class=" language-php">Illuminate\<span class="token package">Pagination<span class="token punctuation">\</span>Presenter</span></code> class, the abstract method <code class=" language-php">getPageLinkWrapper</code> signature has changed to add the <code class=" language-php">rel</code> argument:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getPageLinkWrapper<span class="token punctuation">(</span></span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$rel</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3>Iron.Io Queue Encryption</h3>
<p>If you are using the Iron.io queue driver, you will need to add a new <code class=" language-php">encrypt</code> option to your queue configuration file:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'encrypt'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></code></pre>
<p><a name="upgrade-4.1.29"></a></p>
<h2><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.1.29">Upgrading To 4.1.29 From &lt;= 4.1.x</a></h2>
<p>Laravel 4.1.29 improves the column quoting for all database drivers. This protects your application from some mass assignment vulnerabilities when <strong>not</strong> using the <code class=" language-php">fillable</code> property on models. If you are using the <code class=" language-php">fillable</code> property on your models to protect against mass assignment, your application is not vulnerable. However, if you are using <code class=" language-php">guarded</code> and are passing a user controlled array into an "update" or "save" type function, you should upgrade to <code class=" language-php"><span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">29</span></code> immediately as your application may be at risk of mass assignment.</p>
<p>To upgrade to Laravel 4.1.29, simply <code class=" language-php">composer update</code>. No breaking changes are introduced in this release.</p>
<p><a name="upgrade-4.1.26"></a></p>
<h2><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.1.26">Upgrading To 4.1.26 From &lt;= 4.1.25</a></h2>
<p>Laravel 4.1.26 introduces security improvements for "remember me" cookies. Before this update, if a remember cookie was hijacked by another malicious user, the cookie would remain valid for a long period of time, even after the true owner of the account reset their password, logged out, etc.</p>
<p>This change requires the addition of a new <code class=" language-php">remember_token</code> column to your <code class=" language-php">users</code> (or equivalent) database table. After this change, a fresh token will be assigned to the user each time they login to your application. The token will also be refreshed when the user logs out of the application. The implications of this change are: if a "remember me" cookie is hijacked, simply logging out of the application will invalidate the cookie.</p>
<h3>Upgrade Path</h3>
<p>First, add a new, nullable <code class=" language-php">remember_token</code> of VARCHAR(100), TEXT, or equivalent to your <code class=" language-php">users</code> table.</p>
<p>Next, if you are using the Eloquent authentication driver, update your <code class=" language-php">User</code> class with the following three methods:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberToken<span class="token punctuation">(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">remember_token</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setRememberToken<span class="token punctuation">(</span></span><span class="token variable">$value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">remember_token</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberTokenName<span class="token punctuation">(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'remember_token'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<blockquote>
    <p><strong>Note:</strong> All existing "remember me" sessions will be invalidated by this change, so all users will be forced to re-authenticate with your application.</p>
</blockquote>
<h3>Package Maintainers</h3>
<p>Two new methods were added to the <code class=" language-php">Illuminate\<span class="token package">Auth<span class="token punctuation">\</span>UserProviderInterface</span></code> interface. Sample implementations may be found in the default drivers:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByToken<span class="token punctuation">(</span></span><span class="token variable">$identifier</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateRememberToken<span class="token punctuation">(</span></span>UserInterface <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The <code class=" language-php">Illuminate\<span class="token package">Auth<span class="token punctuation">\</span>UserInterface</span></code> also received the three new methods described in the "Upgrade Path".</p>
<p><a name="upgrade-4.1"></a></p>
<h2><a href="http://laravel.com/docs/5.0/upgrade#upgrade-4.1">Upgrading To 4.1 From 4.0</a></h2>
<h3>Upgrading Your Composer Dependency</h3>
<p>To upgrade your application to Laravel 4.1, change your <code class=" language-php">laravel<span class="token operator">/</span>framework</code> version to <code class=" language-php"><span class="token number">4.1</span><span class="token punctuation">.</span><span class="token operator">*</span></code> in your <code class=" language-php">composer<span class="token punctuation">.</span>json</code> file.</p>
<h3>Replacing Files</h3>
<p>Replace your <code class=" language-php"><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>php</code> file with <a href="https://github.com/laravel/laravel/blob/master/public/index.php">this fresh copy from the repository</a>.</p>
<p>Replace your <code class=" language-php">artisan</code> file with <a href="https://github.com/laravel/laravel/blob/master/artisan">this fresh copy from the repository</a>.</p>
<h3>Adding Configuration Files &amp; Options</h3>
<p>Update your <code class=" language-php">aliases</code> and <code class=" language-php">providers</code> arrays in your <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span>app<span class="token punctuation">.</span>php</code> configuration file. The updated values for these arrays can be found <a href="https://github.com/laravel/laravel/blob/master/app/config/app.php">in this file</a>. Be sure to add your custom and package service providers / aliases back to the arrays.</p>
<p>Add the new <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span>remote<span class="token punctuation">.</span>php</code> file <a href="https://github.com/laravel/laravel/blob/master/app/config/remote.php">from the repository</a>.</p>
<p>Add the new <code class=" language-php">expire_on_close</code> configuration option to your <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span>session<span class="token punctuation">.</span>php</code> file. The default value should be <code class=" language-php"><span class="token boolean">false</span></code>.</p>
<p>Add the new <code class=" language-php">failed</code> configuration section to your <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span>queue<span class="token punctuation">.</span>php</code> file. Here are the default values for the section:</p>
<pre class=" language-php"><code class=" language-php"><span class="token string">'failed'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>
        <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span> <span class="token string">'table'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'failed_jobs'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>
<p><strong>(Optional)</strong> Update the <code class=" language-php">pagination</code> configuration option in your <code class=" language-php">app<span class="token operator">/</span>config<span class="token operator">/</span>view<span class="token punctuation">.</span>php</code> file to <code class=" language-php"><span class="token scope">pagination<span class="token punctuation">::</span></span>slider<span class="token number">-3</span></code>.</p>
<h3>Controller Updates</h3>
<p>If <code class=" language-php">app<span class="token operator">/</span>controllers<span class="token operator">/</span>BaseController<span class="token punctuation">.</span>php</code> has a <code class=" language-php"><span class="token keyword">use</span></code> statement at the top, change <code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span></code> to <code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span></code>.</p>
<h3>Password Reminders Updates</h3>
<p>Password reminders have been overhauled for greater flexibility. You may examine the new stub controller by running the <code class=" language-php">php artisan auth<span class="token punctuation">:</span>reminders<span class="token operator">-</span>controller</code> Artisan command. You may also browse the <a href="http://laravel.com/docs/security#password-reminders-and-reset">updated documentation</a> and update your application accordingly.</p>
<p>Update your <code class=" language-php">app<span class="token operator">/</span>lang<span class="token operator">/</span>en<span class="token operator">/</span>reminders<span class="token punctuation">.</span>php</code> language file to match <a href="https://github.com/laravel/laravel/blob/master/app/lang/en/reminders.php">this updated file</a>.</p>
<h3>Environment Detection Updates</h3>
<p>For security reasons, URL domains may no longer be used to detect your application environment. These values are easily spoofable and allow attackers to modify the environment for a request. You should convert your environment detection to use machine host names (<code class=" language-php">hostname</code> command on Mac, Linux, and Windows).</p>
<h3>Simpler Log Files</h3>
<p>Laravel now generates a single log file: <code class=" language-php">app<span class="token operator">/</span>storage<span class="token operator">/</span>logs<span class="token operator">/</span>laravel<span class="token punctuation">.</span>log</code>. However, you may still configure this behavior in your <code class=" language-php">app<span class="token operator">/</span>start<span class="token operator">/</span><span class="token keyword">global</span><span class="token punctuation">.</span>php</code> file.</p>
<h3>Removing Redirect Trailing Slash</h3>
<p>In your <code class=" language-php">bootstrap<span class="token operator">/</span>start<span class="token punctuation">.</span>php</code> file, remove the call to <code class=" language-php"><span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">redirectIfTrailingSlash<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>. This method is no longer needed as this functionality is now handled by the <code class=" language-php"><span class="token punctuation">.</span>htaccess</code> file included with the framework.</p>
<p>Next, replace your Apache <code class=" language-php"><span class="token punctuation">.</span>htaccess</code> file with <a href="https://github.com/laravel/laravel/blob/master/public/.htaccess">this new one</a> that handles trailing slashes.</p>
<h3>Current Route Access</h3>
<p>The current route is now accessed via <code class=" language-php"><span class="token scope">Route<span class="token punctuation">::</span></span><span class="token function">current<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> instead of <code class=" language-php"><span class="token scope">Route<span class="token punctuation">::</span></span><span class="token function">getCurrentRoute<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>.</p>
<h3>Composer Update</h3>
<p>Once you have completed the changes above, you can run the <code class=" language-php">composer update</code> function to update your core application files! If you receive class load errors, try running the <code class=" language-php">update</code> command with the <code class=" language-php"><span class="token operator">--</span>no<span class="token operator">-</span>scripts</code> option enabled like so: <code class=" language-php">composer update <span class="token operator">--</span>no<span class="token operator">-</span>scripts</code>.</p>
<h3>Wildcard Event Listeners</h3>
<p>The wildcard event listeners no longer append the event to your handler functions parameters. If you require finding the event that was fired you should use <code class=" language-php"><span class="token scope">Event<span class="token punctuation">::</span></span><span class="token function">firing<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code>.</p>
</article>
@stop