<!-- -->
@extends('master')

@section('content')
<article>
    <h1>Extending The Framework</h1>
    <ul>
        <li><a href="http://laravel.com/docs/5.0/extending#managers-and-factories">Managers &amp; Factories</a></li>
        <li><a href="http://laravel.com/docs/5.0/extending#cache">Cache</a></li>
        <li><a href="http://laravel.com/docs/5.0/extending#session">Session</a></li>
        <li><a href="http://laravel.com/docs/5.0/extending#authentication">Authentication</a></li>
        <li><a href="http://laravel.com/docs/5.0/extending#container-based-extension">Service Container Based Extension</a></li>
    </ul>
    <p><a name="managers-and-factories"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/extending#managers-and-factories">Managers &amp; Factories</a></h2>
    <p>Laravel has several <code class=" language-php">Manager</code> classes that manage the creation of driver-based components. These include the cache, session, authentication, and queue components. The manager class is responsible for creating a particular driver implementation based on the application's configuration. For example, the <code class=" language-php">CacheManager</code> class can create APC, Memcached, File, and various other implementations of cache drivers.</p>
    <p>Each of these managers includes an <code class=" language-php">extend</code> method which may be used to easily inject new driver resolution functionality into the manager. We'll cover each of these managers below, with examples of how to inject custom driver support into each of them.</p>
    <blockquote>
        <p><strong>Note:</strong> Take a moment to explore the various <code class=" language-php">Manager</code> classes that ship with Laravel, such as the <code class=" language-php">CacheManager</code> and <code class=" language-php">SessionManager</code>. Reading through these classes will give you a more thorough understanding of how Laravel works under the hood. All manager classes extend the <code class=" language-php">Illuminate\<span class="token package">Support<span class="token punctuation">\</span>Manager</span></code> base class, which provides some helpful, common functionality for each manager.</p>
    </blockquote>
    <p><a name="cache"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/extending#cache">Cache</a></h2>
    <p>To extend the Laravel cache facility, we will use the <code class=" language-php">extend</code> method on the <code class=" language-php">CacheManager</code>, which is used to bind a custom driver resolver to the manager, and is common across all manager classes. For example, to register a new cache driver named "mongo", we would do the following:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">extend<span class="token punctuation">(</span></span><span class="token string">'mongo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">repository<span class="token punctuation">(</span></span><span class="token keyword">new</span> <span class="token class-name">MongoStore</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>The first argument passed to the <code class=" language-php">extend</code> method is the name of the driver. This will correspond to your <code class=" language-php">driver</code> option in the <code class=" language-php">config<span class="token operator">/</span>cache<span class="token punctuation">.</span>php</code> configuration file. The second argument is a Closure that should return an <code class=" language-php">Illuminate\<span class="token package">Cache<span class="token punctuation">\</span>Repository</span></code> instance. The Closure will be passed an <code class=" language-php"><span class="token variable">$app</span></code> instance, which is an instance of <code class=" language-php">Illuminate\<span class="token package">Foundation<span class="token punctuation">\</span>Application</span></code> and a service container.</p>
    <p>The call to <code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span>extend</code> could be done in the <code class=" language-php">boot</code> method of the default <code class=" language-php">App\<span class="token package">Providers<span class="token punctuation">\</span>AppServiceProvider</span></code> that ships with fresh Laravel applications, or you may create your own service provider to house the extension - just don't forget to register the provider in the <code class=" language-php">config<span class="token operator">/</span>app<span class="token punctuation">.</span>php</code> provider array.</p>
    <p>To create our custom cache driver, we first need to implement the <code class=" language-php">Illuminate\<span class="token package">Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Store</span></code> contract. So, our MongoDB cache implementation would look something like this:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">class</span> <span class="token class-name">MongoStore</span> <span class="token keyword">implements</span> <span class="token class-name">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Store</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get<span class="token punctuation">(</span></span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">put<span class="token punctuation">(</span></span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">increment<span class="token punctuation">(</span></span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">decrement<span class="token punctuation">(</span></span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">forever<span class="token punctuation">(</span></span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">forget<span class="token punctuation">(</span></span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">flush<span class="token punctuation">(</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token punctuation">}</span></code></pre>
    <p>We just need to implement each of these methods using a MongoDB connection. Once our implementation is complete, we can finish our custom driver registration:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">extend<span class="token punctuation">(</span></span><span class="token string">'mongo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token scope">Cache<span class="token punctuation">::</span></span><span class="token function">repository<span class="token punctuation">(</span></span><span class="token keyword">new</span> <span class="token class-name">MongoStore</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>If you're wondering where to put your custom cache driver code, consider making it available on Packagist! Or, you could create an <code class=" language-php">Extensions</code> namespace within your <code class=" language-php">app</code> directory. However, keep in mind that Laravel does not have a rigid application structure and you are free to organize your application according to your preferences.</p>
    <p><a name="session"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/extending#session">Session</a></h2>
    <p>Extending Laravel with a custom session driver is just as easy as extending the cache system. Again, we will use the <code class=" language-php">extend</code> method to register our custom code:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Session<span class="token punctuation">::</span></span><span class="token function">extend<span class="token punctuation">(</span></span><span class="token string">'mongo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // Return implementation of SessionHandlerInterface
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h3>Where To Extend The Session</h3>
    <p>You should place your session extension code in the <code class=" language-php">boot</code> method of your <code class=" language-php">AppServiceProvider</code>.</p>
    <h3>Writing The Session Extension</h3>
    <p>Note that our custom session driver should implement the <code class=" language-php">SessionHandlerInterface</code>. This interface contains just a few simple methods we need to implement. A stubbed MongoDB implementation would look something like this:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">class</span> <span class="token class-name">MongoHandler</span> <span class="token keyword">implements</span> <span class="token class-name">SessionHandlerInterface</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">open<span class="token punctuation">(</span></span><span class="token variable">$savePath</span><span class="token punctuation">,</span> <span class="token variable">$sessionName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close<span class="token punctuation">(</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">read<span class="token punctuation">(</span></span><span class="token variable">$sessionId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write<span class="token punctuation">(</span></span><span class="token variable">$sessionId</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">destroy<span class="token punctuation">(</span></span><span class="token variable">$sessionId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">gc<span class="token punctuation">(</span></span><span class="token variable">$lifetime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token punctuation">}</span></code></pre>
    <p>Since these methods are not as readily understandable as the cache <code class=" language-php">StoreInterface</code>, let's quickly cover what each of the methods do:</p>
    <ul>
        <li>The <code class=" language-php">open</code> method would typically be used in file based session store systems. Since Laravel ships with a <code class=" language-php">file</code> session driver, you will almost never need to put anything in this method. You can leave it as an empty stub. It is simply a fact of poor interface design (which we'll discuss later) that PHP requires us to implement this method.</li>
        <li>The <code class=" language-php">close</code> method, like the <code class=" language-php">open</code> method, can also usually be disregarded. For most drivers, it is not needed.</li>
        <li>The <code class=" language-php">read</code> method should return the string version of the session data associated with the given <code class=" language-php"><span class="token variable">$sessionId</span></code>. There is no need to do any serialization or other encoding when retrieving or storing session data in your driver, as Laravel will perform the serialization for you.</li>
        <li>The <code class=" language-php">write</code> method should write the given <code class=" language-php"><span class="token variable">$data</span></code> string associated with the <code class=" language-php"><span class="token variable">$sessionId</span></code> to some persistent storage system, such as MongoDB, Dynamo, etc.</li>
        <li>The <code class=" language-php">destroy</code> method should remove the data associated with the <code class=" language-php"><span class="token variable">$sessionId</span></code> from persistent storage.</li>
        <li>The <code class=" language-php">gc</code> method should destroy all session data that is older than the given <code class=" language-php"><span class="token variable">$lifetime</span></code>, which is a UNIX timestamp. For self-expiring systems like Memcached and Redis, this method may be left empty.</li>
    </ul>
    <p>Once the <code class=" language-php">SessionHandlerInterface</code> has been implemented, we are ready to register it with the Session manager:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Session<span class="token punctuation">::</span></span><span class="token function">extend<span class="token punctuation">(</span></span><span class="token string">'mongo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoHandler</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>Once the session driver has been registered, we may use the <code class=" language-php">mongo</code> driver in our <code class=" language-php">config<span class="token operator">/</span>session<span class="token punctuation">.</span>php</code> configuration file.</p>
    <blockquote>
        <p><strong>Note:</strong> Remember, if you write a custom session handler, share it on Packagist!</p>
    </blockquote>
    <p><a name="authentication"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/extending#authentication">Authentication</a></h2>
    <p>Authentication may be extended the same way as the cache and session facilities. Again, we will use the <code class=" language-php">extend</code> method we have become familiar with:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Auth<span class="token punctuation">::</span></span><span class="token function">extend<span class="token punctuation">(</span></span><span class="token string">'riak'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // Return implementation of Illuminate\Contracts\Auth\UserProvider
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>The <code class=" language-php">UserProvider</code> implementations are only responsible for fetching a <code class=" language-php">Illuminate\<span class="token package">Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Authenticatable</span></code> implementation out of a persistent storage system, such as MySQL, Riak, etc. These two interfaces allow the Laravel authentication mechanisms to continue functioning regardless of how the user data is stored or what type of class is used to represent it.</p>
    <p>Let's take a look at the <code class=" language-php">UserProvider</code> contract:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">interface</span> <span class="token class-name">UserProvider</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveById<span class="token punctuation">(</span></span><span class="token variable">$identifier</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByToken<span class="token punctuation">(</span></span><span class="token variable">$identifier</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateRememberToken<span class="token punctuation">(</span></span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByCredentials<span class="token punctuation">(</span></span><span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validateCredentials<span class="token punctuation">(</span></span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span></code></pre>
    <p>The <code class=" language-php">retrieveById</code> function typically receives a numeric key representing the user, such as an auto-incrementing ID from a MySQL database. The <code class=" language-php">Authenticatable</code> implementation matching the ID should be retrieved and returned by the method.</p>
    <p>The <code class=" language-php">retrieveByToken</code> function retrieves a user by their unique <code class=" language-php"><span class="token variable">$identifier</span></code> and "remember me" <code class=" language-php"><span class="token variable">$token</span></code>, stored in a field <code class=" language-php">remember_token</code>. As with the previous method, the <code class=" language-php">Authenticatable</code> implementation should be returned.</p>
    <p>The <code class=" language-php">updateRememberToken</code> method updates the <code class=" language-php"><span class="token variable">$user</span></code> field <code class=" language-php">remember_token</code> with the new <code class=" language-php"><span class="token variable">$token</span></code>. The new token can be either a fresh token, assigned on successful "remember me" login attempt, or a null when user is logged out.</p>
    <p>The <code class=" language-php">retrieveByCredentials</code> method receives the array of credentials passed to the <code class=" language-php"><span class="token scope">Auth<span class="token punctuation">::</span></span>attempt</code> method when attempting to sign into an application. The method should then "query" the underlying persistent storage for the user matching those credentials. Typically, this method will run a query with a "where" condition on <code class=" language-php"><span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span></code>. The method should then return an implementation of <code class=" language-php">UserInterface</code>. <strong>This method should not attempt to do any password validation or authentication.</strong></p>
    <p>The <code class=" language-php">validateCredentials</code> method should compare the given <code class=" language-php"><span class="token variable">$user</span></code> with the <code class=" language-php"><span class="token variable">$credentials</span></code> to authenticate the user. For example, this method might compare the <code class=" language-php"><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getAuthPassword<span class="token punctuation">(</span></span><span class="token punctuation">)</span></code> string to a <code class=" language-php"><span class="token scope">Hash<span class="token punctuation">::</span></span>make</code> of <code class=" language-php"><span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span></code>. This method should only validate the user's credentials and return boolean.</p>
    <p>Now that we have explored each of the methods on the <code class=" language-php">UserProvider</code>, let's take a look at the <code class=" language-php">Authenticatable</code>. Remember, the provider should return implementations of this interface from the <code class=" language-php">retrieveById</code> and <code class=" language-php">retrieveByCredentials</code> methods:</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">interface</span> <span class="token class-name">Authenticatable</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthIdentifier<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthPassword<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberToken<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setRememberToken<span class="token punctuation">(</span></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberTokenName<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span></code></pre>
    <p>This interface is simple. The <code class=" language-php">getAuthIdentifier</code> method should return the "primary key" of the user. In a MySQL back-end, again, this would be the auto-incrementing primary key. The <code class=" language-php">getAuthPassword</code> should return the user's hashed password. This interface allows the authentication system to work with any User class, regardless of what ORM or storage abstraction layer you are using. By default, Laravel includes a <code class=" language-php">User</code> class in the <code class=" language-php">app</code> directory which implements this interface, so you may consult this class for an implementation example.</p>
    <p>Finally, once we have implemented the <code class=" language-php">UserProvider</code>, we are ready to register our extension with the <code class=" language-php">Auth</code> facade:</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Auth<span class="token punctuation">::</span></span><span class="token function">extend<span class="token punctuation">(</span></span><span class="token string">'riak'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RiakUserProvider</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string">'riak.connection'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>After you have registered the driver with the <code class=" language-php">extend</code> method, you switch to the new driver in your <code class=" language-php">config<span class="token operator">/</span>auth<span class="token punctuation">.</span>php</code> configuration file.</p>
    <p><a name="container-based-extension"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/extending#container-based-extension">Service Container Based Extension</a></h2>
    <p>Almost every service provider included with the Laravel framework binds objects into the service container. You can find a list of your application's service providers in the <code class=" language-php">config<span class="token operator">/</span>app<span class="token punctuation">.</span>php</code> configuration file. As you have time, you should skim through each of these provider's source code. By doing so, you will gain a much better understanding of what each provider adds to the framework, as well as what keys are used to bind various services into the service container.</p>
    <p>For example, the <code class=" language-php">HashServiceProvider</code> binds a <code class=" language-php">hash</code> key into the service container, which resolves into a <code class=" language-php">Illuminate\<span class="token package">Hashing<span class="token punctuation">\</span>BcryptHasher</span></code> instance. You can easily extend and override this class within your own application by overriding this binding. For example:</p>
<pre class=" language-php"><code class=" language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span>

        <span class="token keyword">class</span> <span class="token class-name">SnappyHashProvider</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Hashing<span class="token punctuation">\</span>HashServiceProvider</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot<span class="token punctuation">(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token scope"><span class="token keyword">parent</span><span class="token punctuation">::</span></span><span class="token function">boot<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token this">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">bindShared<span class="token punctuation">(</span></span><span class="token string">'hash'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Snappy<span class="token punctuation">\</span>Hashing<span class="token punctuation">\</span>ScryptHasher</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">}</span></code></pre>
    <p>Note that this class extends the <code class=" language-php">HashServiceProvider</code>, not the default <code class=" language-php">ServiceProvider</code> base class. Once you have extended the service provider, swap out the <code class=" language-php">HashServiceProvider</code> in your <code class=" language-php">config<span class="token operator">/</span>app<span class="token punctuation">.</span>php</code> configuration file with the name of your extended provider.</p>
    <p>This is the general method of extending any core class that is bound in the container. Essentially every core class is bound in the container in this fashion, and can be overridden. Again, reading through the included framework service providers will familiarize you with where various classes are bound into the container, and what keys they are bound by. This is a great way to learn more about how Laravel is put together.</p>
</article>
@stop