<!-- -->
@extends('master')

@section('content')
<article>
    <h1>HTTP Responses</h1>
    <ul>
        <li><a href="http://laravel.com/docs/5.0/responses#basic-responses">Basic Responses</a></li>
        <li><a href="http://laravel.com/docs/5.0/responses#redirects">Redirects</a></li>
        <li><a href="http://laravel.com/docs/5.0/responses#other-responses">Other Responses</a></li>
        <li><a href="http://laravel.com/docs/5.0/responses#response-macros">Response Macros</a></li>
    </ul>
    <p><a name="basic-responses"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/responses#basic-responses">Basic Responses</a></h2>
    <h4>Returning Strings From Routes</h4>
    <p>The most basic response from a Laravel route is a string:</p>
    <p dir="rtl">بیشتر پاسخ های پایه ای از مسیریاب لاراول رشته هستند.</p>
<pre class=" language-php"><code class=" language-php"><span class="token scope">Route<span class="token punctuation">::</span></span><span class="token function">get<span class="token punctuation">(</span></span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Creating Custom Responses</h4>
    <p>However, for most routes and controller actions, you will be returning a full <code class=" language-php">Illuminate\<span class="token package">Http<span class="token punctuation">\</span>Response</span></code> instance or a <a href="http://laravel.com/docs/5.0/views">view</a>. Returning a full <code class=" language-php">Response</code> instance allows you to customize the response's HTTP status code and headers. A <code class=" language-php">Response</code> instance inherits from the <code class=" language-php">Symfony\<span class="token package">Component<span class="token punctuation">\</span>HttpFoundation<span class="token punctuation">\</span>Response</span></code> class, providing a variety of methods for building HTTP responses:</p>
    <p dir="rtl">هرچند که برای بیشتر مسیریاب ها وتوابع کنترلرشما بر می گردانید یک نمونه کامل از Illuminate\Http\Response یا یک view
        برگرداندن یک نمونه پاسخ کامل به شما اجازه می دهد کدهای حالت وهدر را شخصی سازی کنید.یک نمونه response  از کلاس Symfony\Component\HttpFoundation\Response
        ارث بری می کند و توابع مختلفی را برای ساختن پاسخ http  فراهم می کند.
    </p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Response</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">header<span class="token punctuation">(</span></span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>For convenience, you may also use the <code class=" language-php">response</code> helper:</p>
    <p dir="rtl">برای راحتی بیشتر شما ممکن  است از تابع respose  استفاده کنید.</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">header<span class="token punctuation">(</span></span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <blockquote>
        <p><strong>Note:</strong> For a full list of available <code class=" language-php">Response</code> methods, check out its <a href="http://laravel.com/api/master/Illuminate/Http/Response.html">API documentation</a> and the <a href="http://api.symfony.com/2.5/Symfony/Component/HttpFoundation/Response.html">Symfony API documentation</a>.</p>
        <p dir="rtl">برای دریافت لیست کامل توابع response  از این لینک ها استفاده کنید.</p>
    </blockquote>
    <h4>Sending A View In A Response</h4>
    <p>If you need access to the <code class=" language-php">Response</code> class methods, but want to return a view as the response content, you may use the <code class=" language-php">view</code> method for convenience:</p>
    <p dir="rtl">اگر شما نیاز دارید تا دسترسی داشته باشید به توابع کلاس response   ولی می خواهید که یک view  را به عنوان محتوا پاسخ برگردانید شما برای راحتی می توانید از تابع  view  استفاده کنید.</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">view<span class="token punctuation">(</span></span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">header<span class="token punctuation">(</span></span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Attaching Cookies To Responses</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">withCookie<span class="token punctuation">(</span></span><span class="token function">cookie<span class="token punctuation">(</span></span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Method Chaining</h4>
    <p>Keep in mind that most <code class=" language-php">Response</code> methods are chainable, allowing for the fluent building of responses:</p>
    <p dir="rtl">این را در ذهن داشته باشید که بیشتر توابع response  قابل زنجیر شدن هستند.تا به شما اجازه دهند که به راحتی پاسخ را بسازید.</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">view<span class="token punctuation">(</span></span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">header<span class="token punctuation">(</span></span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">)</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">withCookie<span class="token punctuation">(</span></span><span class="token function">cookie<span class="token punctuation">(</span></span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="redirects"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/responses#redirects">Redirects</a></h2>
    <p>Redirect responses are typically instances of the <code class=" language-php">Illuminate\<span class="token package">Http<span class="token punctuation">\</span>RedirectResponse</span></code> class, and contain the proper headers needed to redirect the user to another URL.</p>
    <p dir="rtl">مسیردهی پاسخ ها معمولا یک نمونه از کلاس Illuminate\Http\RedirectResponse است.وشامل هدر های مناسب برای که برای هدایت کاربر به urlنیاز است را داراست.

    </p>
    <h4>Returning A Redirect</h4>
    <p>There are several ways to generate a <code class=" language-php">RedirectResponse</code> instance. The simplest method is to use the <code class=" language-php">redirect</code> helper method. When testing, it is not common to mock the creation of a redirect response, so using the helper method is almost always acceptable:</p>
    <p dir="rtl">چندین روش برای تولید یک نمونه از RedirectResponse  وجود دارد. ساده ترین روش استفاده از تابع redirect است  .  وقتی که امتحان می کنید  مرسوم نیست که تقلید کنید ایجادمسیردهی یک پاسخ بنابراین از تابعی که در بیشتر مواقع جواب می دهد استفاده می کنیم.</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token string">'user/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Returning A Redirect With Flash Data</h4>
    <p>Redirecting to a new URL and <a href="http://laravel.com/docs/5.0/session">flashing data to the session</a> are typically done at the same time. So, for convenience, you may create a <code class=" language-php">RedirectResponse</code> instance <strong>and</strong> flash data to the session in a single method chain:</p>
    <p dir="rtl">مسیردهی به یک url  جدید همچنین تازه کردن اطلاعات در session معمولا در یک زمان انجام می شود.بنابراین برای راحتی شما ممکن است یک نمونه از RedirectResponse ایجاد کنید وتازه کنید داده های درون session را با یک  تابع زنجیره ای</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token string">'user/login'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">with<span class="token punctuation">(</span></span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token string">'Login Failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Redirecting To The Previous URL</h4>
    <p>You may wish to redirect the user to their previous location, for example, after a form submission. You can do so by using the <code class=" language-php">back</code> method:</p>
    <p dir="rtl">شما ممکن است بخواهید کارب را به ادرس قبلی هدایت کنید   برای مثال بعد از تکمیل فرم شما می توانید این کار را با تابع back  انجام دهید.</p>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">back<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">back<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">withInput<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Returning A Redirect To A Named Route</h4>
    <p>When you call the <code class=" language-php">redirect</code> helper with no parameters, an instance of <code class=" language-php">Illuminate\<span class="token package">Routing<span class="token punctuation">\</span>Redirector</span></code> is returned, allowing you to call any method on the <code class=" language-php">Redirector</code> instance. For example, to generate a <code class=" language-php">RedirectResponse</code> to a named route, you may use the <code class=" language-php">route</code> method:</p>
    <p dir="rtl">وقتی شما تابع redirect  رابدون پارامتر فراخوانی می کنیدیک نمونه از Illuminate\Routing\Redirector  برگردانده می  شود.اجازه می دهیم به شما که هر تابعی را در یک نمونه از redirector  فراخوانی کنید.برای نمونه برای تولید یک RedirectResponse به نام یک مسیریاب  شما می توانید از تابع route  استفاده کنید.</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">route<span class="token punctuation">(</span></span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Returning A Redirect To A Named Route With Parameters</h4>
    <p>If your route has parameters, you may pass them as the second argument to the <code class=" language-php">route</code> method.</p>
    <p dir="rtl">اگر مسیریاب شمامقدار ورودی داشته باشد شما می توانید انها را به عنوان ورودی دوم به تابع route  انتقال دهید.</p>
<pre class=" language-php"><code class=" language-php"><span class="token comment" spellcheck="true">// For a route with the following URI: profile/{id}
</span>
        <span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">route<span class="token punctuation">(</span></span><span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p>If you are redirecting to a route with an "ID" parameter that is being populated from an Eloquent model, you may simply pass the model itself. The ID will be extracted automatically:</p>
    <p dir="rtl">اگر شما هدایت می کنید به یک مسیریاب با استفاده از پارامتر id  که با یک مدل eloquent  سازگار است شما به سادگی می توانید مدل را به ان انتقال دهید.id  به صورت خودکار تولید می شود.</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">route<span class="token punctuation">(</span></span><span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Returning A Redirect To A Named Route Using Named Parameters</h4>
<pre class=" language-php"><code class=" language-php"><span class="token comment" spellcheck="true">// For a route with the following URI: profile/{user}
</span>
        <span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">route<span class="token punctuation">(</span></span><span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Returning A Redirect To A Controller Action</h4>
    <p>Similarly to generating <code class=" language-php">RedirectResponse</code> instances to named routes, you may also generate redirects to <a href="http://laravel.com/docs/5.0/controllers">controller actions</a>:</p>
    <p dir="rtl">مشابه با تولید یک نمونه RedirectResponse  به یک مسیریاب نامگذاری شده شما می توانید مسیردهی کنید به تابع یک کنترلر</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">action<span class="token punctuation">(</span></span><span class="token string">'App\Http\Controllers\HomeController@index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <blockquote>
        <p><strong>Note:</strong> You do not need to specify the full namespace to the controller if you have registered a root controller namespace via <code class=" language-php"><span class="token scope">URL<span class="token punctuation">::</span></span>setRootControllerNamespace</code>.</p>
        <p dir="rtl">شما نیاز ندارید تا تعیین کنید فضای نام را  بطور کامل برای کنترلر اگر شما ثبت کنید فضای نام ریشه کنترلربوسیله </p>
    </blockquote>
    <h4>Returning A Redirect To A Controller Action With Parameters</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">action<span class="token punctuation">(</span></span><span class="token string">'App\Http\Controllers\UserController@profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Returning A Redirect To A Controller Action Using Named Parameters</h4>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">redirect<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">action<span class="token punctuation">(</span></span><span class="token string">'App\Http\Controllers\UserController@profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <p><a name="other-responses"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/responses#other-responses">Other Responses</a></h2>
    <p>The <code class=" language-php">response</code> helper may be used to conveniently generate other types of response instances. When the <code class=" language-php">response</code> helper is called without arguments, an implementation of the <code class=" language-php">Illuminate\<span class="token package">Contracts<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>ResponseFactory</span></code> <a href="http://laravel.com/docs/5.0/contracts">contract</a> is returned. This contract provides several helpful methods for generating responses.</p>
    <p dir="rtl">تابع response  ممکن است استفاده شود تا انواع دیگری از پاسخ ها را تولید کند وقتی تابع response  فراخوانی می شود بدون ورودی   یک پیاده سازی از قرارداد Illuminate\Contracts\Routing\Respons  فراخوانی می شود. این قرارداد چندین تابع مفید برای تولید پاسخ تولید می کند.</p>
    <h4>Creating A JSON Response</h4>
    <p>The <code class=" language-php">json</code> method will automatically set the <code class=" language-php">Content<span class="token operator">-</span>Type</code> header to <code class=" language-php">application<span class="token operator">/</span>json</code>:</p>
    <p dir="rtl">تابع json  به صورت اتوماتیک هدر  cotent-typeرا برای application/json:  تولید می کند.</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">json<span class="token punctuation">(</span></span><span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'Abigail'</span><span class="token punctuation">,</span> <span class="token string">'state'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'CA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Creating A JSONP Response</h4>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">json<span class="token punctuation">(</span></span><span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'Abigail'</span><span class="token punctuation">,</span> <span class="token string">'state'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'CA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setCallback<span class="token punctuation">(</span></span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">input<span class="token punctuation">(</span></span><span class="token string">'callback'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <h4>Creating A File Download Response</h4>
<pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">download<span class="token punctuation">(</span></span><span class="token variable">$pathToFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">download<span class="token punctuation">(</span></span><span class="token variable">$pathToFile</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">download<span class="token punctuation">(</span></span><span class="token variable">$pathToFile</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">deleteFileAfterSend<span class="token punctuation">(</span></span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
    <blockquote>
        <p><strong>Note:</strong> Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII file name.</p>
        <p dir="rtl">Symfony HttpFoundation,  که مدیریت فایل های دانلود را بر عهده دارد نیاز دارد که نام فایل از نوع اسکی یا انگلیسی باشد.</p>
    </blockquote>
    <p><a name="response-macros"></a></p>
    <h2><a href="http://laravel.com/docs/5.0/responses#response-macros">Response Macros</a></h2>
    <p>If you would like to define a custom response that you can re-use in a variety of your routes and controllers, you may use the <code class=" language-php">macro</code> method on an implementation of <code class=" language-php">Illuminate\<span class="token package">Contracts<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>ResponseFactory</span></code>.</p>
    <p dir="rtl">اگر شما تمایل دارید پاخ دلخواهی را تعریف کنید تا شما بتوانید استفاده مجدد داشته باشید از انواع مسیریاب ها وکنترلرهایتان شما ممکن است از تابع macros  برای اجرای یک نمونه  lluminate\Contracts\Routing\ResponseFactory  استفاده کنید . برای مثال تابع boot    در  service provider</p>
    <p>For example, from a <a href="http://laravel.com/docs/5.0/providers">service provider's</a> <code class=" language-php">boot</code> method:</p>
<pre class=" language-php"><code class=" language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span>

        <span class="token keyword">use</span> <span class="token package">Response</span><span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>ServiceProvider</span><span class="token punctuation">;</span>

        <span class="token keyword">class</span> <span class="token class-name">ResponseMacroServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * Perform post-registration booting of services.
     *
     * @return void
     */</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot<span class="token punctuation">(</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token scope">Response<span class="token punctuation">::</span></span><span class="token function">macro<span class="token punctuation">(</span></span><span class="token string">'caps'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token scope">Response<span class="token punctuation">::</span></span><span class="token function">make<span class="token punctuation">(</span></span><span class="token function">strtoupper<span class="token punctuation">(</span></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">}</span></code></pre>
    <p>The <code class=" language-php">macro</code> function accepts a name as its first argument, and a Closure as its second. The macro's Closure will be executed when calling the macro name from a <code class=" language-php">ResponseFactory</code> implementation or the <code class=" language-php">response</code> helper:</p>
    <p dir="rtl">تابع macro  یک نام را بع عنوان ورودی اولش می پذیرد ویک عبارت را به عنوان ورودی دومش عبارت macro  اجرا می شود وقتی نام ماکرو از اجرای ResponseFactory یا تابع response  فراخوانی می شود.</p>
    <pre class=" language-php"><code class=" language-php"><span class="token keyword">return</span> <span class="token function">response<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">caps<span class="token punctuation">(</span></span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</article>
@stop